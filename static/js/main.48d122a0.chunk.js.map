{"version":3,"sources":["utils/constants.js","utils/services.js","components/Card.jsx","components/List.jsx","containers/RecipesContainer.jsx","App.js","reportWebVitals.js","index.js"],"names":["API_URL","setApiKey","url","getRecipes","query","a","console","log","axios","response","data","results","getRecipe","id","Card","props","recipe","title","image","useState","isVegan","setIsVegan","sourceUrl","setSourceUrl","useEffect","info","vegan","getRecipeInfo","className","onClick","window","location","src","alt","List","recipes","map","RecipesContainer","setRecipes","searchTerm","setSearchTerm","fetchRecepies","param","href","URL","searchParams","get","getURlParam","type","value","onChange","event","term","target","onKeyDown","key","history","replaceState","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAEaA,EAAU,sC,gBCCjBC,EAAY,SAACC,GAAD,gBAAYA,EAAZ,mBDHK,qCCKVC,EAAU,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DAClBH,EADkB,UACTD,EAAU,GAAD,OAAID,EAAJ,mBADA,kBACsCI,GAC9DE,QAAQC,IAAI,MAAOL,GAFK,SAGDM,IAAMN,GAHL,cAGlBO,EAHkB,yBAIjBA,EAASC,KAAKC,SAJG,2CAAH,sDAOVC,EAAS,uCAAG,WAAOC,GAAP,iBAAAR,EAAA,6DACjBH,EADiB,UACRD,EAAU,GAAD,OACnBD,EADmB,YACRa,EADQ,iBADD,oCAIAL,IAAMN,GAJN,cAIjBO,EAJiB,yBAKhBA,EAASC,MALO,2CAAH,sD,OCoBPI,EA5BF,SAACC,GACZ,IAAQC,EAAWD,EAAXC,OACAC,EAAqBD,EAArBC,MAAOJ,EAAcG,EAAdH,GAAIK,EAAUF,EAAVE,MACnB,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,YACW,uCAAG,4BAAAnB,EAAA,sEACDO,EAAUC,GADT,OACdY,EADc,OAEpBJ,EAAWI,EAAKC,OAChBH,EAAaE,EAAKH,WAHE,2CAAH,qDAKnBK,KACC,CAACd,IAMJ,OACE,sBAAKe,UAAU,OAAOC,QALJ,WAClBC,OAAOC,SAAWT,GAIlB,UACE,qBAAKU,IAAKd,EAAOe,IAAI,kBACrB,mBAAGL,UAAU,QAAb,SAAsBX,IACrBG,GAAW,mBAAGQ,UAAU,QAAb,uBCZHM,EAZF,SAACnB,GACZ,IAAQoB,EAAYpB,EAAZoB,QAER,OACE,6BACGA,EAAQC,KAAI,SAACpB,GAAD,OACX,cAAC,EAAD,CAAsBA,OAAQA,GAAnBA,EAAOH,UCuCXwB,EA3CU,WACvB,MAA8BlB,mBAAS,IAAvC,mBAAOgB,EAAP,KAAgBG,EAAhB,KACA,EAAoCnB,mBAAS,IAA7C,mBAAOoB,EAAP,KAAmBC,EAAnB,KAEMC,EAAa,uCAAG,WAAOF,GAAP,eAAAlC,EAAA,sEACEF,EAAWoC,GADb,OACdJ,EADc,OAEpBG,EAAWH,GAFS,2CAAH,sDAKnBX,qBAAU,WACR,IAAMkB,EHKiB,WACzB,IAAMC,EAAOb,OAAOC,SAASY,KAG7B,OAFY,IAAIC,IAAID,GACFE,aAAaC,IAAI,SGRnBC,GACVL,IACFF,EAAcE,GACdD,EAAcC,MAEf,IAcH,OACE,gCACE,uBACEd,UAAU,YACVoB,KAAK,OACLC,MAAOV,EACPW,SAlBiB,SAACC,GACtB,IAAMC,EAAOD,EAAME,OAAOJ,MAC1BT,EAAcY,IAiBVE,UAdgB,SAACH,GHAE,IAACT,EGCN,UAAdS,EAAMI,MHDcb,EGEVH,EHDhBT,OAAO0B,QAAQC,aAAa,KAAM,KAAlC,iBAAkDf,IGE9CD,EAAcF,OAad,cAAC,EAAD,CAAMJ,QAASA,QCtCNuB,EAFH,kBAAM,cAAC,EAAD,KCSHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.48d122a0.chunk.js","sourcesContent":["export const API_KEY = '518d69d4eaf348e1a32273d150ef4268';\n\nexport const API_URL = 'https://api.spoonacular.com/recipes';\n","import { API_KEY, API_URL } from './constants';\nimport axios from 'axios';\n\nconst setApiKey = (url) => `${url}?apiKey=${API_KEY}`;\n\nexport const getRecipes = async (query) => {\n  const url = `${setApiKey(`${API_URL}/complexSearch`)}&query=${query}`;\n  console.log('url', url);\n  const response = await axios(url);\n  return response.data.results;\n};\n\nexport const getRecipe = async (id) => {\n  const url = `${setApiKey(\n    `${API_URL}/${id}/information`\n  )}&includeNutrition=false`;\n  const response = await axios(url);\n  return response.data;\n};\n\nexport const getURlParam = () => {\n  const href = window.location.href;\n  const url = new URL(href);\n  const param = url.searchParams.get('query');\n  return param;\n};\n\nexport const setURLParam = (param) => {\n  window.history.replaceState(null, null, `?query=${param}`);\n};\n","import { React, useEffect, useState } from 'react';\n\nimport { getRecipe } from '../utils/services';\n\nconst Card = (props) => {\n  const { recipe } = props;\n  const { title, id, image } = recipe;\n  const [isVegan, setIsVegan] = useState(false);\n  const [sourceUrl, setSourceUrl] = useState('');\n\n  useEffect(() => {\n    const getRecipeInfo = async () => {\n      const info = await getRecipe(id);\n      setIsVegan(info.vegan);\n      setSourceUrl(info.sourceUrl);\n    };\n    getRecipeInfo();\n  }, [id]);\n\n  const handleClick = () => {\n    window.location = sourceUrl;\n  };\n\n  return (\n    <div className=\"card\" onClick={handleClick}>\n      <img src={image} alt=\"cooked recipe\" />\n      <p className=\"title\">{title}</p>\n      {isVegan && <p className=\"vegan\">Vegan</p>}\n    </div>\n  );\n};\n\nexport default Card;\n","import { React } from 'react';\nimport Card from './Card';\n\nconst List = (props) => {\n  const { recipes } = props;\n\n  return (\n    <ul>\n      {recipes.map((recipe) => (\n        <Card key={recipe.id} recipe={recipe} />\n      ))}\n    </ul>\n  );\n};\n\nexport default List;\n","import { React, useState, useEffect } from 'react';\n\nimport List from '../components/List';\nimport { getRecipes, getURlParam, setURLParam } from '../utils/services';\n\nconst RecipesContainer = () => {\n  const [recipes, setRecipes] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const fetchRecepies = async (searchTerm) => {\n    const recipes = await getRecipes(searchTerm);\n    setRecipes(recipes);\n  };\n\n  useEffect(() => {\n    const param = getURlParam();\n    if (param) {\n      setSearchTerm(param);\n      fetchRecepies(param);\n    }\n  }, []);\n\n  const handleOnChange = (event) => {\n    const term = event.target.value;\n    setSearchTerm(term);\n  };\n\n  const handleKeyDown = (event) => {\n    if (event.key === 'Enter') {\n      setURLParam(searchTerm);\n      fetchRecepies(searchTerm);\n    }\n  };\n\n  return (\n    <div>\n      <input\n        className=\"searchbar\"\n        type=\"text\"\n        value={searchTerm}\n        onChange={handleOnChange}\n        onKeyDown={handleKeyDown}\n      />\n      <List recipes={recipes} />\n    </div>\n  );\n};\n\nexport default RecipesContainer;\n","import './App.css';\nimport Recipes from './containers/RecipesContainer';\n\nconst App = () => <Recipes />;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}